// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd
#Использовать gitrunner
#Использовать asserts
#Использовать tempfiles

#Использовать "../../../src/core"

Перем БДД; //контекст фреймворка 1bdd

Перем Лог;
Перем ЭтоWindows;

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯУстанавливаюПутьВыполненияКомандыКТекущейБиблиотеке");
	ВсеШаги.Добавить("ЯСкопировалКаталогТестовогоХранилищаКонфигурацииВоВременныйКаталог");
	ВсеШаги.Добавить("ЯСохраняюЗначениеВременногоКаталогаВПеременной");
	ВсеШаги.Добавить("ЯСоздаюТестовойФайлAuthors");
	ВсеШаги.Добавить("ЯЗаписываюВФайлVersion");
	ВсеШаги.Добавить("ЯИнициализируюСвязьСВнешнимРепозиторием");
	ВсеШаги.Добавить("ЯДобавляюПозиционныйПараметрДляКомандыИзПеременной");
	ВсеШаги.Добавить("ЯДобавляюПараметрДляКомандыИзПеременной");
	ВсеШаги.Добавить("ЯДобавляюПараметрыДляКоманды");
	ВсеШаги.Добавить("ЯСоздаюНеполныйТестовойФайлAuthors");
	ВсеШаги.Добавить("ЯСоздаюНовыйОбъектГитрепозиторий");
	ВсеШаги.Добавить("ЯУстанавливаюРабочейКаталогВоВременныйКаталог");
	ВсеШаги.Добавить("ЯУстанавливаюВКонтекстеПризнакСтатистикиСкриптовOnescript");
	ВсеШаги.Добавить("ЯИнициализируюРепозиторийВКаталогеИзПеременной");
	ВсеШаги.Добавить("ВКаталогеИзПеременнойСоздаетсяФайлИлиКаталог");
	ВсеШаги.Добавить("ВКаталогеИзПеременнойНеСоздаетсяФайлИлиКаталог");
	ВсеШаги.Добавить("ЯОчищаюЗначениеПеременныхОкружения");
	ВсеШаги.Добавить("ЯСкопировалКаталогТестовогоХранилищаКонфигурацииВКаталогИзПеременной");
	ВсеШаги.Добавить("ЯИнициализируюBareРепозиторийВКаталогеИзПеременной");
	ВсеШаги.Добавить("ЯУстанавливаюПеременнуюОкруженияИзПеременной");
	ВсеШаги.Добавить("ЯУстанавливаюРабочейКаталогИзПеременной");
	ВсеШаги.Добавить("ЯСоздаюНовыйОбъектМенеджерсинхронизации");
	ВсеШаги.Добавить("ЯУстанавливаюАвторизациюВХранилищеПользователяСПаролем");
	ВсеШаги.Добавить("ЯУстанавливаюВерсиюПлатформы");
	ВсеШаги.Добавить("ЯВыполняюВыполняютСинхронизацию");
	ВсеШаги.Добавить("ВыводЛогаСодержит");

	Возврат ВсеШаги;
КонецФункции

Функция ИмяЛога() Экспорт
	Возврат "bdd.git2reposync.feature";
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	


КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт

КонецПроцедуры

//я устанавливаю в контексте признак статистики скриптов OneScript
Процедура ЯУстанавливаюВКонтекстеПризнакСтатистикиСкриптовOnescript() Экспорт

	// ПутьКаталога = "coverage";

	// ОбъектКаталога = Новый Файл(ОбъединитьПути(КаталогГитсинк(), ПутьКаталога));
	
	// БДД.СохранитьВКонтекст("ПризнакСтатистикиСкриптовOnescript", ОбъектКаталога);

КонецПроцедуры

//Я инициализирую репозиторий в каталоге из переменной "ПутьКаталогаИсходников"
Процедура ЯИнициализируюРепозиторийВКаталогеИзПеременной(Знач ПутьКаталогаИсходников) Экспорт
	ГитРепозиторий = БДД.ПолучитьИзКонтекста("ГитРепозиторий");
	ВременныйКаталог = БДД.ПолучитьИзКонтекста(ПутьКаталогаИсходников);
	ГитРепозиторий.УстановитьРабочийКаталог(ВременныйКаталог);

	ГитРепозиторий.Инициализировать();

КонецПроцедуры
//Вывод лога содержит "Завершена синхронизации с git"
Процедура ВыводЛогаСодержит(Знач ПарамСтрока1) Экспорт
	//ВызватьИсключение Новый ИнформацияОбОшибке("Шаг <ВыводЛогаСодержит> не реализован", "Не реализовано.");
КонецПроцедуры

//Я устанавливаю переменную окружения "git2reposync_STORAGE_PATH" из переменной "КаталогХранилища1С"
Процедура ЯУстанавливаюПеременнуюОкруженияИзПеременной(Знач ИмяПеременной, Знач КаталогХранилища1С) Экспорт
	
	ЗначениеПеременной = БДД.ПолучитьИзКонтекста(КаталогХранилища1С);
	УстановитьПеременнуюСреды(ИмяПеременной, ЗначениеПеременной);

КонецПроцедуры

//Я устанавливаю рабочей каталог из переменной "ПутьКаталогаИсходников"
Процедура ЯУстанавливаюРабочейКаталогИзПеременной(Знач ПутьКаталогаИсходников) Экспорт
	ВременныйКаталог = БДД.ПолучитьИзКонтекста(ПутьКаталогаИсходников);
	УстановитьТекущийКаталог(ВременныйКаталог);

КонецПроцедуры

//Я устанавливаю рабочей каталог во временный каталог
Процедура ЯУстанавливаюРабочейКаталогВоВременныйКаталог() Экспорт
	УстановитьТекущийКаталог(ВременныеФайлы.СоздатьКаталог());
КонецПроцедуры

//Я создаю новый объект ГитРепозиторий
Процедура ЯСоздаюНовыйОбъектГитрепозиторий() Экспорт
	ГитРепозиторий = Новый ГитРепозиторий;
	БДД.СохранитьВКонтекст("ГитРепозиторий", ГитРепозиторий);
КонецПроцедуры

//Я сохраняю значение временного каталога в переменной "URLРепозитория"
Процедура ЯСохраняюЗначениеВременногоКаталогаВПеременной(Знач ИмяПеременной) Экспорт
	ВременныйКаталог = БДД.ПолучитьИзКонтекста("ВременныйКаталог");
	БДД.СохранитьВКонтекст(ИмяПеременной, ВременныйКаталог);
КонецПроцедуры

//Я создаю тестовой файл AUTHORS
Процедура ЯСоздаюТестовойФайлAuthors() Экспорт
	
	ПутьКаталогаИсходников = БДД.ПолучитьИзКонтекста("ПутьКаталогаИсходников");
	ФайлАвторов = Новый ЗаписьТекста;
	ФайлАвторов.Открыть(ОбъединитьПути(ПутьКаталогаИсходников, "AUTHORS"), "utf-8");
	ФайлАвторов.ЗаписатьСтроку("Администратор=Администратор <admin@localhost>");
	ФайлАвторов.ЗаписатьСтроку("Отладка=Отладка <debug@localhost>");
	ФайлАвторов.Закрыть();

КонецПроцедуры

//Я записываю "0" в файл VERSION
Процедура ЯЗаписываюВФайлVersion(Знач НомерВерсии) Экспорт
	
	ПутьКаталогаИсходников = БДД.ПолучитьИзКонтекста("ПутьКаталогаИсходников");
	
	ПутьКФайлуВерсий = ОбъединитьПути(ПутьКаталогаИсходников,"VERSION");
	Попытка
		Запись = Новый ЗаписьТекста(ПутьКФайлуВерсий, "utf-8");
		Запись.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""UTF-8""?>");
		Запись.ЗаписатьСтроку("<VERSION>" + НомерВерсии + "</VERSION>");
		Запись.Закрыть();
	Исключение
		Если Запись <> Неопределено Тогда
			ОсвободитьОбъект(Запись);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;

КонецПроцедуры

//я инициализирую связь "ПутьКаталогаИсходников" с внешним репозиторием "URLРепозитория"
Процедура ЯИнициализируюСвязьСВнешнимРепозиторием(Знач ПеременнаяПутьКаталогаИсходников, Знач ПеременнаяURLРепозитория) Экспорт
	
	ГитРепозиторий = БДД.ПолучитьИзКонтекста("ГитРепозиторий");
	URLРепозитория = БДД.ПолучитьИзКонтекста(ПеременнаяURLРепозитория);
	ПутьКаталогаИсходников = БДД.ПолучитьИзКонтекста(ПеременнаяПутьКаталогаИсходников);
	
	ГитРепозиторий.УстановитьРабочийКаталог(ПутьКаталогаИсходников);
	ГитРепозиторий.Инициализировать();
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("add");
	ПараметрыКоманды.Добавить("--all");
	ГитРепозиторий.ВыполнитьКоманду(ПараметрыКоманды);
	ГитРепозиторий.Закоммитить("тест");
	
	НастройкаОтправить = Новый НастройкаКомандыОтправить;
	НастройкаОтправить.УстановитьURLРепозиторияОтправки(URLРепозитория);
	НастройкаОтправить.ОтображатьПрогресс();
	НастройкаОтправить.ПерезаписатьИсторию();
	НастройкаОтправить.Отслеживать();
	НастройкаОтправить.ПолнаяОтправка();
	
	ГитРепозиторий.УстановитьНастройкуКомандыОтправить(НастройкаОтправить);
	
	ГитРепозиторий.Отправить();
	
КонецПроцедуры

//Я добавляю позиционный параметр для команды "git2reposync" из переменной "URLРепозитория"
Процедура ЯДобавляюПозиционныйПараметрДляКомандыИзПеременной(Знач ИмяКоманды, Знач ИмяПеременной) Экспорт

	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	ЗначениеПеременной = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	
	Команда.ДобавитьПараметр(ЗначениеПеременной);

КонецПроцедуры

//Я добавляю параметр "-tmpdir" для команды "git2reposync" из переменной "ВременнаяДиректория"
Процедура ЯДобавляюПараметрДляКомандыИзПеременной(Знач Параметр, Знач ИмяКоманды, Знач ИмяПеременной) Экспорт
	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	ЗначениеПеременной = БДД.ПолучитьИзКонтекста(ИмяПеременной);

	Если СтрНайти(ЗначениеПеременной, " ") Тогда
		ЗначениеПеременной = ОбернутьВКавычки(ЗначениеПеременной);
	КонецЕсли;

	Команда.ДобавитьПараметр(СтрШаблон("%1 %2", Параметр, ЗначениеПеременной));

КонецПроцедуры

//Я устанавливаю путь выполнения команды "git2reposync" к текущей библиотеке
Процедура ЯУстанавливаюПутьВыполненияКомандыКТекущейБиблиотеке(Знач ИмяКоманды) Экспорт

	ПутьГитсинк = ПолучитьПеременнуюСреды("git2reposync_TESTING_PATH");

	Если НЕ ЗначениеЗаполнено(ПутьГитсинк) Тогда
		ПутьГитсинк = ОбъединитьПути(КаталогГитсинк(), "src", "cmd", "git2reposync.os");
	КонецЕсли;

	ФайлГитсинк = Новый Файл(ПутьГитсинк);

	ПутьГитсинк = ФайлГитсинк.ПолноеИмя;

	ЭтоExe = ВРег(ФайлГитсинк.Расширение) = ".EXE";

	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));

	Если НЕ ЭтоExe Тогда
		
		УстановитьДвижок(Команда);
		Команда.ДобавитьПараметр(ОбернутьВКавычки(ПутьГитсинк));
	Иначе
		
		Если ЭтоWindows Тогда
			Команда.УстановитьКоманду(ПутьГитсинк); // Нельзя оборачивать в кавычки 
		Иначе
			Команда.УстановитьКоманду("mono");
			Команда.ДобавитьПараметр(ПутьГитсинк);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

//я скопировал каталог тестового хранилища конфигурации во временный каталог
Процедура ЯСкопировалКаталогТестовогоХранилищаКонфигурацииВоВременныйКаталог() Экспорт
	
	ВременныйКаталог = БДД.ПолучитьИзКонтекста("ВременныйКаталог");
	КопироватьФайл(ПутьКВременномуФайлуХранилища1С(),  ОбъединитьПути(ВременныйКаталог, "1cv8ddb.1CD"))

КонецПроцедуры

//Я создаю неполный тестовой файл AUTHORS
Процедура ЯСоздаюНеполныйТестовойФайлAuthors() Экспорт
	
	ПутьКаталогаИсходников = БДД.ПолучитьИзКонтекста("ПутьКаталогаИсходников");
	ФайлАвторов = Новый ЗаписьТекста;
	ФайлАвторов.Открыть(ОбъединитьПути(ПутьКаталогаИсходников, "AUTHORS"), "utf-8");
	ФайлАвторов.ЗаписатьСтроку("Отладка=Отладка <debug@localhost>");
	ФайлАвторов.Закрыть();

КонецПроцедуры

//Я создаю новый объект МенеджерСинхронизации
Процедура ЯСоздаюНовыйОбъектМенеджерсинхронизации() Экспорт
	МенеджерСинхронизации = Новый МенеджерСинхронизации;
	БДД.СохранитьВКонтекст("МенеджерСинхронизации", МенеджерСинхронизации);
КонецПроцедуры

//Я устанавливаю авторизацию в хранилище пользователя "Администратор" с паролем ""
Процедура ЯУстанавливаюАвторизациюВХранилищеПользователяСПаролем(Знач Пользователь, Знач Пароль) Экспорт

	МенеджерСинхронизации = БДД.ПолучитьИзКонтекста("МенеджерСинхронизации");
	МенеджерСинхронизации.АвторизацияВХранилищеКонфигурации(Пользователь, Пароль);
			   
КонецПроцедуры

//Я устанавливаю версию платформы "8.3"
Процедура ЯУстанавливаюВерсиюПлатформы(Знач ВерсияПлатформы) Экспорт

	МенеджерСинхронизации = БДД.ПолучитьИзКонтекста("МенеджерСинхронизации");
	МенеджерСинхронизации.ВерсияПлатформы(ВерсияПлатформы);
	
КонецПроцедуры

//Я выполняю выполняют синхронизацию
Процедура ЯВыполняюВыполняютСинхронизацию() Экспорт
	
	МенеджерСинхронизации = БДД.ПолучитьИзКонтекста("МенеджерСинхронизации");
	ПутьКаталогаИсходников = БДД.ПолучитьИзКонтекста("ПутьКаталогаИсходников");
	КаталогХранилища1С = БДД.ПолучитьИзКонтекста("КаталогХранилища1С");
	МенеджерСинхронизации.Синхронизировать(ПутьКаталогаИсходников, КаталогХранилища1С);

КонецПроцедуры

//Я добавляю параметры для команды "git2reposync"
//|--storage-user Администратор|
//|-useVendorUnload|
Процедура ЯДобавляюПараметрыДляКоманды(Знач ИмяКоманды, Знач ТаблицаПараметров) Экспорт
	
	Команда = БДД.ПолучитьИзКонтекста(КлючКоманды(ИмяКоманды));
	Для Каждого Параметр из ТаблицаПараметров Цикл
		Команда.ДобавитьПараметр(Параметр[0])
	КонецЦикла

КонецПроцедуры

//я скопировал каталог тестового хранилища конфигурации в каталог из переменной "КаталогХранилища1С"
Процедура ЯСкопировалКаталогТестовогоХранилищаКонфигурацииВКаталогИзПеременной(Знач ИмяПеременной) Экспорт
	КаталогХранилища1С = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	КопироватьФайл(ПутьКВременномуФайлуХранилища1С(), ОбъединитьПути(КаталогХранилища1С, "1cv8ddb.1CD"));
КонецПроцедуры

//Я инициализирую bare репозиторий в каталоге из переменной "URLРепозитория"
Процедура ЯИнициализируюBareРепозиторийВКаталогеИзПеременной(Знач ИмяПеременной) Экспорт
	
	ГитРепозиторий = БДД.ПолучитьИзКонтекста("ГитРепозиторий");
	URLРепозитория = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	ГитРепозиторий.УстановитьРабочийКаталог(URLРепозитория);
	ПараметрыКоманды = Новый Массив;
	ПараметрыКоманды.Добавить("init");
	ПараметрыКоманды.Добавить("--bare");
	ГитРепозиторий.ВыполнитьКоманду(ПараметрыКоманды);

КонецПроцедуры

//В каталоге из переменной "ПутьКаталогаИсходников" создается файл или каталог "AUTHORS"
Процедура ВКаталогеИзПеременнойСоздаетсяФайлИлиКаталог(Знач ПутьКаталогаИсходников, Знач ИмяФайла) Экспорт
	
	ВременныйКаталог = БДД.ПолучитьИзКонтекста(ПутьКаталогаИсходников);
	ИскомыйФайл = Новый Файл(ОбъединитьПути(ВременныйКаталог, ИмяФайла));
	Ожидаем.Что(ИскомыйФайл.Существует(), "Файл должен был существовать").ЭтоИстина();

КонецПроцедуры

//В каталоге из переменной "ПутьКаталогаИсходников" не создается файл или каталог ".git"
Процедура ВКаталогеИзПеременнойНеСоздаетсяФайлИлиКаталог(Знач ПутьКаталогаИсходников, Знач ИмяФайла) Экспорт
	ВременныйКаталог = БДД.ПолучитьИзКонтекста(ПутьКаталогаИсходников);
	ИскомыйФайл = Новый Файл(ОбъединитьПути(ВременныйКаталог, ИмяФайла));
	Ожидаем.Что(ИскомыйФайл.Существует(), "Файл не должен был существовать").ЭтоЛожь();
КонецПроцедуры

//Я очищаю значение переменных окружения
//|git2reposync_STORAGE_PATH|
//|git2reposync_WORKDIR|
Процедура ЯОчищаюЗначениеПеременныхОкружения(Знач ПарамТаблица1) Экспорт
	Для каждого Переменная Из ПарамТаблица1 Цикл
		УстановитьПеременнуюСреды(Переменная[0], "");
	КонецЦикла;
КонецПроцедуры

Функция ПутьКВременномуФайлуХранилища1С()
	
	Возврат ОбъединитьПути(КаталогFixtures(), "ТестовыйФайлХранилища1С.1CD");
	
КонецФункции

Функция КаталогFixtures()
	Возврат ОбъединитьПути(КаталогГитсинк(), "tests", "fixtures");
КонецФункции

Функция КаталогГитсинк()
	Возврат ОбъединитьПути(ТекущийСценарий().Каталог, "..", "..", "..");
КонецФункции

Функция ОбернутьВКавычки(Знач Строка);
	Возврат """" + Строка + """";
КонецФункции

Функция КлючКоманды(Знач ИмяКоманды)
	Возврат "Команда-" + ИмяКоманды;
КонецФункции

Функция ЭтоWindows()
	Если ЭтоWindows = Неопределено Тогда
		СистемнаяИнформация = Новый СистемнаяИнформация;
		ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
	КонецЕсли;
	Возврат ЭтоWindows;
КонецФункции

Процедура УстановитьДвижок(Команда)
	Команда.УстановитьКоманду("oscript");
	Если Не ЭтоWindows() Тогда
		Команда.ДобавитьПараметр("-encoding=utf-8");	
	КонецЕсли;
КонецПроцедуры

Лог = Логирование.ПолучитьЛог(ИмяЛога());
		
СистемнаяИнформация = Новый СистемнаяИнформация;
ЭтоWindows = Найти(НРег(СистемнаяИнформация.ВерсияОС), "windows") > 0;
