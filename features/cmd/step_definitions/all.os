#Использовать tempfiles
#Использовать yaml

// Реализация шагов BDD-фич/сценариев c помощью фреймворка https://github.com/artbear/1bdd

Перем БДД; //контекст фреймворка 1bdd

// Метод выдает список шагов, реализованных в данном файле-шагов
Функция ПолучитьСписокШагов(КонтекстФреймворкаBDD) Экспорт
	БДД = КонтекстФреймворкаBDD;

	ВсеШаги = Новый Массив;

	ВсеШаги.Добавить("ЯСоздаюТестовойФайлAuthorsВКаталогеИзПеременной");
	ВсеШаги.Добавить("ЯЗаписываюВФайлVersionВКаталогеИзПеременной");
	ВсеШаги.Добавить("ЯСоздаюФайлНастройкиИзФайлаИСохраняюВПеременную");
	ВсеШаги.Добавить("ЯДобавляюПараметр__Параметрдлятаблицы____Параметрстрока__git2reposync");

	Возврат ВсеШаги;
КонецФункции

// Реализация шагов

// Процедура выполняется перед запуском каждого сценария
Процедура ПередЗапускомСценария(Знач Узел) Экспорт
	
КонецПроцедуры

// Процедура выполняется после завершения каждого сценария
Процедура ПослеЗапускаСценария(Знач Узел) Экспорт
	
КонецПроцедуры



//Я создаю тестовой файл AUTHORS в каталоге из переменной "ПутьКаталогаИсходников_1"
Процедура ЯСоздаюТестовойФайлAuthorsВКаталогеИзПеременной(Знач ИмяПеременной) Экспорт
	ПутьКаталогаИсходников = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	ФайлАвторов = Новый ЗаписьТекста;
	ФайлАвторов.Открыть(ОбъединитьПути(ПутьКаталогаИсходников, "AUTHORS"), "utf-8");
	ФайлАвторов.ЗаписатьСтроку("Администратор=Администратор <admin@localhost>");
	ФайлАвторов.ЗаписатьСтроку("Отладка=Отладка <debug@localhost>");
	ФайлАвторов.Закрыть();
КонецПроцедуры

//Я записываю "0" в файл VERSION в каталоге из переменной "ПутьКаталогаИсходников_1"
Процедура ЯЗаписываюВФайлVersionВКаталогеИзПеременной(Знач НомерВерсии, Знач ИмяПеременной) Экспорт
	
	ПутьКаталогаИсходников = БДД.ПолучитьИзКонтекста(ИмяПеременной);
	
	ПутьКФайлуВерсий = ОбъединитьПути(ПутьКаталогаИсходников,"VERSION");
	Попытка
		Запись = Новый ЗаписьТекста(ПутьКФайлуВерсий, "utf-8");
		Запись.ЗаписатьСтроку("<?xml version=""1.0"" encoding=""UTF-8""?>");
		Запись.ЗаписатьСтроку("<VERSION>" + НомерВерсии + "</VERSION>");
		Запись.Закрыть();
	Исключение
		Если Запись <> Неопределено Тогда
			ОсвободитьОбъект(Запись);
		КонецЕсли;
		ВызватьИсключение;
	КонецПопытки;
КонецПроцедуры

//Я создаю файл настройки из файла <fixtures/default.yaml> и сохраняю в переменную "FILE"
Процедура ЯСоздаюФайлНастройкиИзФайлаИСохраняюВПеременную(Знач ПутьКФайлу, Знач ИмяПеременной) Экспорт
	
	
	ПутьКаталогаИсходников_1 = БДД.ПолучитьИзКонтекста("ПутьКаталогаИсходников_1");
	КаталогХранилища1С_1 = БДД.ПолучитьИзКонтекста("КаталогХранилища1С_1");

	ПутьКаталогаИсходников_2 = БДД.ПолучитьИзКонтекста("ПутьКаталогаИсходников_2");
	КаталогХранилища1С_2 = БДД.ПолучитьИзКонтекста("КаталогХранилища1С_2");

	ПутьКаталогаИсходниковРасширения = БДД.ПолучитьИзКонтекста("ПутьКаталогаИсходниковРасширения");
	КаталогХранилищаРасширения = БДД.ПолучитьИзКонтекста("КаталогХранилищаРасширения");


	ЧтениеТекста = Новый ЧтениеТекста();
	ЧтениеТекста.Открыть(ПутьКФайлу, КодировкаТекста.UTF8);
	ТекстYaml = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	ТекстYaml = СтрЗаменить(ТекстYaml, "<ПутьКаталогаИсходников_1>", ПутьКаталогаИсходников_1);
	ТекстYaml = СтрЗаменить(ТекстYaml, "<КаталогХранилища1С_1>", КаталогХранилища1С_1);
	
	ТекстYaml = СтрЗаменить(ТекстYaml, "<ПутьКаталогаИсходников_2>", ПутьКаталогаИсходников_2);
	ТекстYaml = СтрЗаменить(ТекстYaml, "<КаталогХранилища1С_2>", КаталогХранилища1С_2);

	ТекстYaml = СтрЗаменить(ТекстYaml, "<ПутьКаталогаИсходниковРасширения>", ПутьКаталогаИсходниковРасширения);
	ТекстYaml = СтрЗаменить(ТекстYaml, "<КаталогХранилищаРасширения>", КаталогХранилищаРасширения);

	ВременныйФайл = ВременныеФайлы.СоздатьФайл(".yaml");

	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл);
	ЗаписьТекста.Записать(ТекстYaml);
	ЗаписьТекста.Закрыть();


	ЧтениеТекста = Новый ЧтениеТекста();
	ЧтениеТекста.Открыть(ВременныйФайл, КодировкаТекста.UTF8);
	ТекстYaml = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();

	ПарсерYAml = Новый ПарсерYaml();
	Результа = ПарсерYAml.ПрочитатьYaml(ТекстYaml);

	ТекстJson = ОБъектВJson(Результа);

	ВременныйФайл = ВременныеФайлы.СоздатьФайл(".json");
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл);
	ЗаписьТекста.Записать(ТекстJson);
	ЗаписьТекста.Закрыть();

	БДД.СохранитьВКонтекст(ИмяПеременной, ВременныйФайл);

КонецПроцедуры


Функция ОБъектВJson(Знач Объект, ПараметрыЗаписи = Неопределено) Экспорт
	
	Если ПараметрыЗаписи = Неопределено Тогда
		ПараметрыЗаписи = Новый ПараметрыЗаписиJSON(ПереносСтрокJSON.Авто, " ", ,,,,,, Истина);
	КонецЕсли;

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку(ПараметрыЗаписи);
	ЗаписатьJSON(ЗаписьJSON, Объект);
	
	Возврат ЗаписьJSON.Закрыть();

КонецФункции

Функция ОбъектИзJson(ТекстJSON, ЧитатьВСтруктуру = Ложь, ФорматДаты = Неопределено) Экспорт
		
	Если ФорматДаты = Неопределено Тогда
		ФорматДаты = ФорматДатыJSON.ISO;
	КонецЕсли;
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(ТекстJSON);
	
	Объект = ПрочитатьJSON(ЧтениеJSON,
							НЕ ЧитатьВСтруктуру,,
							ФорматДаты);
	ЧтениеJSON.Закрыть();
	Возврат Объект;
	 
КонецФункции
