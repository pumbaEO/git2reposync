#Использовать logos

Перем Лог;

#Область Подписки_на_события

#Область Подписка_на_активизацию_плагинов

// Вызывается при начале установке новых подписчиков
//
// Параметры:
//   МенеджерСинхронизации - Объект.МенеджерСинхронизации - ссылка на класс МенеджерСинхронизации
//
Процедура ПриАктивизации(МенеджерСинхронизации) Экспорт

	Лог.Информация("Вызвано событие <ПриАктивизации> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписка_на_получение_параметров_выполнения

// Вызывается при передаче параметров в МенеджерСинхронизации 
//
// Параметры:
//   ПараметрыПодписчиков - Объект.ПараметрыПодписчиков - ссылка на класс ПараметрыПодписчиков
// 
// Объект <ПараметрыПодписчиков> реализовывает публичные функции:
// * Функция <Параметр>
// 		Получает и возвращает значение из индекса параметров
//
// 		Параметры:
//   	  * СтрокаИмениПараметра - Строка - имя параметра допустимо указание нескольких имен к параметру через пробел
//                              		  Например, "config --config -c c"
//   	  * ЗначениеПоУмолчанию  - Произвольный - возвращаемое значение в случае отсутствия параметра после получения из индекса
// 		Возвращаемое значение:
//   	  Строка, Число, Булево, Массив, Соответствие, Неопределено - значение параметра
// * Функция <ПолучитьПараметры> 
// 		Возвращает используемый индекс параметров 
//
// 		Возвращаемое значение:
//   	  Соответствие - соответствие ключей и значение параметров
//
// Примеры: 
//   ```
//   
//   ОтправлятьМетки = ПараметрыПодписчиков.Параметр("push --push P ОтправлятьМетки", Ложь);
//
//   ```
Процедура ПриПолученииПараметров(ПараметрыПодписчиков) Экспорт

	Лог.Информация("Вызвано событие <ПриПолученииПараметров> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_регистрацию_команд_приложения

// Вызывается при регистрации команды приложения
//
// Параметры:
//   ИмяКоманды - Строка - имя регистрируемой команды 
//   КлассРеализации - Объект.КомандаПриложения - ссылка на класс <КомандаПриложения>
//
Процедура ПриРегистрацииКомандыПриложения(ИмяКоманды, КлассРеализации) Экспорт

	Лог.Информация("Вызвано событие <ПриРегистрацииКомандыПриложения> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_начало_и_окончания_выполнения

// Вызывается перед началом работы менеджера синхронизации
//
// Параметры:
//   ПутьКХранилищу - Строка - полный путь к хранилищу конфигурации 
//   КаталогРабочейКопии - Строка - полный путь к рабочему каталогу копии
//
Процедура ПередНачаломВыполнения(ПутьКХранилищу, КаталогРабочейКопии) Экспорт

	Лог.Информация("Вызвано событие <ПередНачаломВыполнения> для плагина <%1>", Имя());

КонецПроцедуры

// Вызывается после завершения работы менеджера синхронизации
//
// Параметры:
//   ПутьКХранилищу - Строка - полный путь к хранилищу конфигурации 
//   КаталогРабочейКопии - Строка - полный путь к рабочему каталогу копии
//
Процедура ПослеОкончанияВыполнения(ПутьКХранилищу, КаталогРабочейКопии) Экспорт

	Лог.Информация("Вызвано событие <ПослеОкончанияВыполнения> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_получение_таблицы_версий

// Вызывается при получении таблицы версий из хранилища конфигурации
//
// Параметры:
//   ТаблицаВерсий - ТаблицаЗначений - инициализированная таблица с колонками:
//     * Дата                - Дата   - дата версии
//     * НомерВерсии         - Число  - номер версии
// 	   * Комментарий         - Строка - комментарий автора к версии
//     * Автор               - Строка - имя автора версии в хранилище 
// 	   * Тэг                 - Строка - метка версии в хранилище 	
// 	   * ГУИД_Автора         - Строка - уникальный идентификатор автора версии
//     * ПредставлениеАвтора - Строка - представление автора для коммита в git
//   ПутьКХранилищу - Строка - полный путь к хранилищу конфигурации 
//   СтандартнаяОбработка - Булево - признак отказ от обработки по умолчанию
//
Процедура ПриПолученииТаблицыВерсий(ТаблицаВерсий, ПутьКХранилищу, ТекущаяВерсия, СтандартнаяОбработка) Экспорт

	Лог.Информация("Вызвано событие <ПриПолученииТаблицыВерсий> для плагина <%1>", Имя());

КонецПроцедуры

// Вызывается после получении таблицы версий из хранилища конфигурации
//
// Параметры:
//   ТаблицаВерсий - ТаблицаЗначений - заполненная таблица с колонками:
//     * Дата                - Дата   - дата версии
//     * НомерВерсии         - Число  - номер версии
// 	   * Комментарий         - Строка - комментарий автора к версии
//     * Автор               - Строка - имя автора версии в хранилище 
// 	   * Тэг                 - Строка - метка версии в хранилище 	
// 	   * ГУИД_Автора         - Строка - уникальный идентификатор автора версии
//     * ПредставлениеАвтора - Строка - представление автора для коммита в git
//   ПутьКХранилищу - Строка - полный путь к хранилищу конфигурации 
//
Процедура ПослеПолученияТаблицыВерсий(ТаблицаВерсий, ПутьКХранилищу) Экспорт

	Лог.Информация("Вызвано событие <ПослеПолученияТаблицыВерсий> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_получение_таблицы_пользователей

// Вызывается при получении таблицы пользователей из хранилища конфигурации
//
// Параметры:
//   ТаблицаПользователей - ТаблицаЗначений - инициализированная таблица с колонками:
//     * Автор               - Строка - имя автора версии в хранилище 
//     * ПредставлениеАвтора - Строка - представление автора для коммита в git
// 	   * ГУИД_Автора         - Строка - уникальный идентификатор автора версии
//   ПутьКХранилищу - Строка - полный путь к хранилищу конфигурации 
//   СтандартнаяОбработка - Булево - признак отказ от обработки по умолчанию
//
Процедура ПриПолученииТаблицыПользователей(ТаблицаПользователей, ПутьКХранилищу, СтандартнаяОбработка) Экспорт

	Лог.Информация("Вызвано событие <ПриПолученииТаблицыПользователей> для плагина <%1>", Имя());

КонецПроцедуры

// Вызывается после получении таблицы пользователей из хранилища конфигурации
//
// Параметры:
//   ТаблицаПользователей - ТаблицаЗначений - заполненная таблица с колонками:
//     * Автор               - Строка - имя автора версии в хранилище 
//     * ПредставлениеАвтора - Строка - представление автора для коммита в git
// 	   * ГУИД_Автора         - Строка - уникальный идентификатор автора версии
//   ПутьКХранилищу - Строка - полный путь к хранилищу конфигурации 
//
Процедура ПослеПолученияТаблицыПользователей(ТаблицаПользователей, ПутьКХранилищу) Экспорт

	Лог.Информация("Вызвано событие <ПослеПолученияТаблицыПользователей> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_обработки_строки_версии

// Вызывается перед началом обработки таблица истории хранилища конфигурации
//
// Параметры:
//   ТаблицаИсторииХранилища - ТаблицаЗначений - заполненная таблица с колонками:
//     * Дата                - Дата   - дата версии
//     * НомерВерсии         - Число  - номер версии
// 	   * Комментарий         - Строка - комментарий автора к версии
//     * Автор               - Строка - имя автора версии в хранилище 
// 	   * Тэг                 - Строка - метка версии в хранилище 	
// 	   * ГУИД_Автора         - Строка - уникальный идентификатор автора версии
//     * ПредставлениеАвтора - Строка - представление автора для коммита в git
//   ТекущаяВерсия - Число - текущая/последняя синхронизированная версия из файла <VERSION>
//   СледующаяВерсия - Число - следующая версия для обработки
//   МаксимальнаяВерсияДляРазбора - Число - максимальная версия для обработки
//
Процедура ПередНачаломЦиклаОбработкиВерсий(ТаблицаИсторииХранилища, ТекущаяВерсия, СледующаяВерсия, МаксимальнаяВерсияДляРазбора) Экспорт

	Лог.Информация("Вызвано событие <ПередНачаломЦиклаОбработкиВерсий> для плагина <%1>", Имя());

КонецПроцедуры

// Вызывается перед обработкой версии хранилища
//
// Параметры:
//   СтрокаВерсии - СтрокаТаблицыЗначений - текущая строка из ТаблицаИсторииХранилища
//   ТекущаяВерсия - Число - текущая версия для обработки
//
Процедура ПередОбработкойВерсииХранилища(СтрокаВерсии, ТекущаяВерсия) Экспорт

	Лог.Информация("Вызвано событие <ПередОбработкойВерсииХранилища> для плагина <%1>", Имя());

КонецПроцедуры

// Вызывается при обработкой версии хранилища
//
// Параметры:
//   СтрокаВерсии - СтрокаТаблицыЗначений - текущая строка из ТаблицаИсторииХранилища
//   ТекущаяВерсия - Число - текущая версия для обработки
//
Процедура ПриОбработкеВерсииХранилища(СтрокаВерсии, ТекущаяВерсия) Экспорт

	Лог.Информация("Вызвано событие <ПриОбработкеВерсииХранилища> для плагина <%1>", Имя());

КонецПроцедуры

// Вызывается после обработкой версии хранилища
//
// Параметры:
//   СтрокаВерсии - СтрокаТаблицыЗначений - текущая строка из ТаблицаИсторииХранилища
//   ТекущаяВерсия - Число - текущая версия для обработки
//
Процедура ПослеОбработкиВерсииХранилища(СтрокаВерсии, ТекущаяВерсия) Экспорт

	Лог.Информация("Вызвано событие <ПослеОбработкиВерсииХранилища> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_выполнение_коммита

// Вызывается перед фиксацией изменений в рабочей копии
//
// Параметры:
//   КаталогРабочейКопии - Строка - полный путь к рабочему каталогу копии
//   Комментарий - Строка - комментарий изменений при фиксации
//   Автор - Строка - автор изменений при фиксации 
//   Дата - Дата - дата изменений фиксации 
//
Процедура ПередКоммитом(КаталогРабочейКопии, Комментарий, Автор, Дата) Экспорт

	Лог.Информация("Вызвано событие <ПередКоммитом> для плагина <%1>", Имя());

КонецПроцедуры

// Вызывается при фиксации изменений в рабочей копии
//
// Параметры:
//   ГитРепозиторий - Объект.ГитРепозиторий - подготовленный объект класса <ГитРепозиторий>
//   Комментарий - Строка - комментарий при фиксации изменений
//   ПроиндексироватьОтслеживаемыеФайлы - Булево - признак добавления не отслеживаемых файлов в фиксацию
//   ИмяФайлаКомментария - Строка - путь к файлу для записи комментария фиксации
//   АвторДляГит - Строка - автор изменений изменений в формате `Иванов_А <ivanov@mail.ru>`
//   ДатаДляГит - Дата - дата изменений 
//   Коммитер - Строка - автор фиксации изменений в формате `Иванов_А <ivanov@mail.ru>`
//   ДатаКоммитера - Дата - дата фиксации изменений
//
Процедура ПриКоммите(ГитРепозиторий,
						Комментарий,
						ПроиндексироватьОтслеживаемыеФайлы,
						ИмяФайлаКомментария,
						АвторДляГит,
						ДатаДляГит,
						Коммитер,
						ДатаКоммитера) Экспорт

	Лог.Информация("Вызвано событие <ПриКоммите> для плагина <%1>", Имя());

КонецПроцедуры

// Вызывается после фиксацией изменений в рабочей копии
//
// Параметры:
//   ГитРепозиторий - Объект.ГитРепозиторий - подготовленный объект класса <ГитРепозиторий>
//   КаталогРабочейКопии - Строка - полный путь к рабочему каталогу копии
//
Процедура ПослеКоммита(ГитРепозиторий, КаталогРабочейКопии) Экспорт

	Лог.Информация("Вызвано событие <ПослеКоммита> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_начало_и_окончания_выгрузки_версии_конфигурации


// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   ПутьКХранилищу - <Тип.Вид> - <описание параметра>
//   НомерВерсии - <Тип.Вид> - <описание параметра>
//
Процедура ПередНачаломВыгрузкиВерсииХранилищаКонфигурации(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии) Экспорт

	Лог.Информация("Вызвано событие <ПередНачаломВыгрузкиВерсииХранилищаКонфигурации> для плагина <%1>", Имя());

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   ПутьКХранилищу - <Тип.Вид> - <описание параметра>
//   НомерВерсии - <Тип.Вид> - <описание параметра>
//
Процедура ПослеОкончанияВыгрузкиВерсииХранилищаКонфигурации(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии) Экспорт

	Лог.Информация("Вызвано событие <ПослеОкончанияВыгрузкиВерсииХранилищаКонфигурации> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_загрузку_версии_конфигурации_из_хранилища

// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   ПутьКХранилищу - <Тип.Вид> - <описание параметра>
//   НомерВерсии - <Тип.Вид> - <описание параметра>
//
Процедура ПередЗагрузкойВерсииХранилищаКонфигурации(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии) Экспорт

	Лог.Информация("Вызвано событие <ПередЗагрузкойВерсииХранилищаКонфигурации> для плагина <%1>", Имя());

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   ПутьКХранилищу - <Тип.Вид> - <описание параметра>
//   НомерВерсии - <Тип.Вид> - <описание параметра>
//   СтандартнаяОбработка - <Тип.Вид> - <описание параметра>
//
Процедура ПриЗагрузкеВерсииХранилищаВКонфигурацию(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии, СтандартнаяОбработка) Экспорт

	Лог.Информация("Вызвано событие <ПриЗагрузкеВерсииХранилищаВКонфигурацию> для плагина <%1>", Имя());

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   ПутьКХранилищу - <Тип.Вид> - <описание параметра>
//   НомерВерсии - <Тип.Вид> - <описание параметра>
//
Процедура ПослеЗагрузкиВерсииХранилищаВКонфигурацию(Конфигуратор, КаталогРабочейКопии, ПутьКХранилищу, НомерВерсии) Экспорт

	Лог.Информация("Вызвано событие <ПослеЗагрузкиВерсииХранилищаВКонфигурацию> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_выгрузку_конфигурации_в_исходники

// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   КаталогВыгрузки - <Тип.Вид> - <описание параметра>
//   ПутьКХранилищу - <Тип.Вид> - <описание параметра>
//   НомерВерсии - <Тип.Вид> - <описание параметра>
//
Процедура ПередВыгрузкойКонфигурациюВИсходники(Конфигуратор, КаталогРабочейКопии, КаталогВыгрузки, ПутьКХранилищу, НомерВерсии) Экспорт

	Лог.Информация("Вызвано событие <ПередВыгрузкойКонфигурациюВИсходники> для плагина <%1>", Имя());

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогВыгрузки - <Тип.Вид> - <описание параметра>
//   СтандартнаяОбработка - <Тип.Вид> - <описание параметра>
//
Процедура ПриВыгрузкеКонфигурациюВИсходники(Конфигуратор, КаталогВыгрузки, СтандартнаяОбработка) Экспорт

	Лог.Информация("Вызвано событие <ПриВыгрузкеКонфигурациюВИсходники> для плагина <%1>", Имя());

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогВыгрузки - <Тип.Вид> - <описание параметра>
//
Процедура ПослеВыгрузкиКонфигурациюВИсходники(Конфигуратор, КаталогВыгрузки) Экспорт

	Лог.Информация("Вызвано событие <ПослеВыгрузкиКонфигурациюВИсходники> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_очистку_каталога_рабочей_версии

// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   КаталогВыгрузки - <Тип.Вид> - <описание параметра>
//   ПутьКХранилищу - <Тип.Вид> - <описание параметра>
//   НомерВерсии - <Тип.Вид> - <описание параметра>
//
Процедура ПередОчисткойКаталогаРабочейКопии(Конфигуратор, КаталогРабочейКопии, КаталогВыгрузки, ПутьКХранилищу, НомерВерсии) Экспорт

	Лог.Информация("Вызвано событие <ПередОчисткойКаталогаРабочейКопии> для плагина <%1>", Имя());

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   СоответствиеИменФайловДляПропуска - <Тип.Вид> - <описание параметра>
//   СтандартнаяОбработка - <Тип.Вид> - <описание параметра>
//
Процедура ПриОчисткеКаталогаРабочейКопии(КаталогРабочейКопии, СоответствиеИменФайловДляПропуска, СтандартнаяОбработка) Экспорт

	Лог.Информация("Вызвано событие <ПриОчисткеКаталогаРабочейКопии> для плагина <%1>", Имя());

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   СоответствиеИменФайловДляПропуска - <Тип.Вид> - <описание параметра>
//
Процедура ПослеОчисткиКаталогаРабочейКопии(КаталогРабочейКопии, СоответствиеИменФайловДляПропуска) Экспорт

	Лог.Информация("Вызвано событие <ПослеОчисткиКаталогаРабочейКопии> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Подписки_на_перемещение_в_каталог_рабочей_копии

// <Описание процедуры>
//
// Параметры:
//   Конфигуратор - <Тип.Вид> - <описание параметра>
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   КаталогВыгрузки - <Тип.Вид> - <описание параметра>
//   ПутьКХранилищу - <Тип.Вид> - <описание параметра>
//   НомерВерсии - <Тип.Вид> - <описание параметра>
//
Процедура ПередПеремещениемВКаталогРабочейКопии(Конфигуратор, КаталогРабочейКопии, КаталогВыгрузки, ПутьКХранилищу, НомерВерсии) Экспорт

	Лог.Информация("Вызвано событие <ПередПеремещениемВКаталогРабочейКопии> для плагина <%1>", Имя());

КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   КаталогВыгрузки - <Тип.Вид> - <описание параметра>
//   СтандартнаяОбработка - <Тип.Вид> - <описание параметра>
//
Процедура ПриПеремещенииВКаталогРабочейКопии(КаталогРабочейКопии, КаталогВыгрузки, СтандартнаяОбработка) Экспорт

	Лог.Информация("Вызвано событие <ПриПеремещенииВКаталогРабочейКопии> для плагина <%1>", Имя());
	
КонецПроцедуры

// <Описание процедуры>
//
// Параметры:
//   КаталогРабочейКопии - <Тип.Вид> - <описание параметра>
//   КаталогВыгрузки - <Тип.Вид> - <описание параметра>
//
Процедура ПослеПеремещенияВКаталогРабочейКопии(КаталогРабочейКопии, КаталогВыгрузки) Экспорт

	Лог.Информация("Вызвано событие <ПослеПеремещенияВКаталогРабочейКопии> для плагина <%1>", Имя());

КонецПроцедуры

#КонецОбласти

#Область Интерфейс_плагина

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция Версия() Экспорт
	Возврат "0.0.1";
КонецФункции

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция Описание() Экспорт
	Возврат "Тестовый плагин";
КонецФункции

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция Справка() Экспорт
	Возврат "Справка плагина";
КонецФункции

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция Имя() Экспорт
	Возврат "test_plugin";
КонецФункции

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция ИмяЛога() Экспорт
	Возврат "oscript.lib.git2reposync.test_plugin";
КонецФункции

// <Описание функции>
//
//  Возвращаемое значение:
//   <Тип.Вид> - <описание возвращаемого значения>
//
Функция Приоритет() Экспорт
	Возврат 1;
КонецФункции

#КонецОбласти

Лог = Логирование.ПолучитьЛог(ИмяЛога());

