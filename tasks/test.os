#Использовать 1bdd
#Использовать 1testrunner
#Использовать 1commands

Функция ПрогнатьТесты()
	
	Тестер = Новый Тестер;

	ПутьКТестам = ОбъединитьПути(ТекущийСценарий().Каталог, "..", "tests");
	ПутьКОтчетуJUnit = ОбъединитьПути(ТекущийСценарий().Каталог, "..");

	КаталогТестов = Новый Файл(ПутьКТестам);
	Если Не КаталогТестов.Существует() Тогда
		Сообщить(СтрШаблон("Не найден каталог тестов %1", ПутьКТестам));
		Возврат Истина;
	КонецЕсли;

	РезультатТестирования = Тестер.ТестироватьКаталог(
		КаталогТестов,
		Новый Файл(ПутьКОтчетуJUnit)
	);

	Успешно = РезультатТестирования = 0;
	
	Возврат Успешно;
КонецФункции // ПрогнатьТесты()

Функция ПрогнатьФичи_core()
	
	ПутьОтчетаJUnit = "./bdd-log.xml";

	КаталогФич = ОбъединитьПути(".", "features", "core");

	Файл_КаталогФич = Новый Файл(КаталогФич);
	Если Не Файл_КаталогФич.Существует() Тогда
		Сообщить(СтрШаблон("Не найден каталог фич %1", КаталогФич));
		Возврат Истина;
	КонецЕсли;

	ИсполнительБДД = Новый ИсполнительБДД;
	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(Файл_КаталогФич, Файл_КаталогФич);
	ИтоговыйРезультатВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);

	СтатусВыполнения = ИсполнительБДД.ВозможныеСтатусыВыполнения().НеВыполнялся;
	Если РезультатыВыполнения.Строки.Количество() > 0 Тогда
		
		СтатусВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);
		
	КонецЕсли;

	ГенераторОтчетаJUnit = Новый ГенераторОтчетаJUnit;
	ГенераторОтчетаJUnit.Сформировать(РезультатыВыполнения, СтатусВыполнения, ПутьОтчетаJUnit);

	Сообщить(СтрШаблон("Результат прогона фич <%1>
	|", ИтоговыйРезультатВыполнения));

	Возврат ИтоговыйРезультатВыполнения <> ИсполнительБДД.ВозможныеСтатусыВыполнения().Сломался;
КонецФункции // ПрогнатьФичи()

Функция ПрогнатьФичи_cmd()
	
	КаталогПроекта = ОбъединитьПути(ТекущийСценарий().Каталог, "..");

	ПутьКПриложению = ОбъединитьПути(КаталогПроекта, "src", "cmd", "git2reposync.os");

	ФайлПутьКПриложению = Новый Файл(ПутьКПриложению);

	УстановитьПеременнуюСреды("git2reposync_TESTING_PATH", ФайлПутьКПриложению.ПолноеИмя);

	ПутьОтчетаJUnit = ОбъединитьПути(КаталогПроекта, "bdd-log-cmd.xml");

	КаталогФич = ОбъединитьПути(КаталогПроекта, "features", "cmd");

	Файл_КаталогФич = Новый Файл(КаталогФич);
	Если Не Файл_КаталогФич.Существует() Тогда
		Сообщить(СтрШаблон("Не найден каталог фич %1", КаталогФич));
		Возврат Истина;
	КонецЕсли;

	ИсполнительБДД = Новый ИсполнительБДД;
	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(Файл_КаталогФич, Файл_КаталогФич);
	ИтоговыйРезультатВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);

	СтатусВыполнения = ИсполнительБДД.ВозможныеСтатусыВыполнения().НеВыполнялся;
	Если РезультатыВыполнения.Строки.Количество() > 0 Тогда
		
		СтатусВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);
		
	КонецЕсли;

	ГенераторОтчетаJUnit = Новый ГенераторОтчетаJUnit;
	ГенераторОтчетаJUnit.Сформировать(РезультатыВыполнения, СтатусВыполнения, ПутьОтчетаJUnit);

	Сообщить(СтрШаблон("Результат прогона фич <%1>
	|", ИтоговыйРезультатВыполнения));

	Возврат ИтоговыйРезультатВыполнения <> ИсполнительБДД.ВозможныеСтатусыВыполнения().Сломался;
КонецФункции // ПрогнатьФичи()

Функция ПрогнатьФичи_exe()
	
	СобратьEXE();

	КаталогПроекта = ОбъединитьПути(ТекущийСценарий().Каталог, "..");

	ПутьКПриложению = ОбъединитьПути(КаталогПроекта, "bin", "git2reposync.exe");

	ФайлПутьКПриложению = Новый Файл(ПутьКПриложению);

	УстановитьПеременнуюСреды("git2reposync_TESTING_PATH", ФайлПутьКПриложению.ПолноеИмя);

	ПутьОтчетаJUnit = ОбъединитьПути(КаталогПроекта, "bdd-log-exe.xml");

	КаталогФич = ОбъединитьПути(КаталогПроекта, "features", "cmd");

	Файл_КаталогФич = Новый Файл(КаталогФич);
	Если Не Файл_КаталогФич.Существует() Тогда
		Сообщить(СтрШаблон("Не найден каталог фич %1", КаталогФич));
		Возврат Истина;
	КонецЕсли;

	ИсполнительБДД = Новый ИсполнительБДД;
	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(Файл_КаталогФич, Файл_КаталогФич);
	ИтоговыйРезультатВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);

	СтатусВыполнения = ИсполнительБДД.ВозможныеСтатусыВыполнения().НеВыполнялся;
	Если РезультатыВыполнения.Строки.Количество() > 0 Тогда
		
		СтатусВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);
		
	КонецЕсли;

	ГенераторОтчетаJUnit = Новый ГенераторОтчетаJUnit;
	ГенераторОтчетаJUnit.Сформировать(РезультатыВыполнения, СтатусВыполнения, ПутьОтчетаJUnit);

	Сообщить(СтрШаблон("Результат прогона фич <%1>
	|", ИтоговыйРезультатВыполнения));

	Возврат ИтоговыйРезультатВыполнения <> ИсполнительБДД.ВозможныеСтатусыВыполнения().Сломался;
КонецФункции // ПрогнатьФичи()

Процедура СобратьEXE()
	
	КомандаOpm = Новый Команда;
	КомандаOpm.УстановитьКоманду("opm");
	КомандаOpm.ДобавитьПараметр("run make");	

	КодВозврата = КомандаOpm.Исполнить();

	Если КодВозврата <> 0  Тогда
		ВызватьИсключение КомандаOpm.ПолучитьВывод();
	КонецЕсли;

	Сообщить("Сборка exe завершена");

КонецПроцедуры

Функция ПрогнатьФичи_opm()
	
	ПутьОтчетаJUnit = "./bdd-log.xml";

	КаталогФич = ОбъединитьПути(".", "features", "opm");

	Файл_КаталогФич = Новый Файл(КаталогФич);
	Если Не Файл_КаталогФич.Существует() Тогда
		Сообщить(СтрШаблон("Не найден каталог фич %1", КаталогФич));
		Возврат Истина;
	КонецЕсли;

	ИсполнительБДД = Новый ИсполнительБДД;
	РезультатыВыполнения = ИсполнительБДД.ВыполнитьФичу(Файл_КаталогФич, Файл_КаталогФич);
	ИтоговыйРезультатВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);

	СтатусВыполнения = ИсполнительБДД.ВозможныеСтатусыВыполнения().НеВыполнялся;
	Если РезультатыВыполнения.Строки.Количество() > 0 Тогда
		
		СтатусВыполнения = ИсполнительБДД.ПолучитьИтоговыйСтатусВыполнения(РезультатыВыполнения);
		
	КонецЕсли;

	ГенераторОтчетаJUnit = Новый ГенераторОтчетаJUnit;
	ГенераторОтчетаJUnit.Сформировать(РезультатыВыполнения, СтатусВыполнения, ПутьОтчетаJUnit);

	Сообщить(СтрШаблон("Результат прогона фич <%1>
	|", ИтоговыйРезультатВыполнения));

	Возврат ИтоговыйРезультатВыполнения <> ИсполнительБДД.ВозможныеСтатусыВыполнения().Сломался;
КонецФункции // ПрогнатьФичи()

Функция ПрогнатьФичи(ТолькоЮнитТесты)
	
	Если ТолькоЮнитТесты Тогда
		Возврат Истина;
	КонецЕсли;

	ФичиПрошли_opm = ПрогнатьФичи_opm();
	ФичиПрошли_core = ПрогнатьФичи_core();
	ФичиПрошли_cmd = ПрогнатьФичи_cmd();
	ФичиПрошли_exe = ПрогнатьФичи_exe();
	// ФичиПрошли_exe = Истина;

	Возврат 
		ФичиПрошли_opm 
		И ФичиПрошли_core
		И ФичиПрошли_cmd
		И ФичиПрошли_exe
		;

КонецФункции

ТестыПрошли = Истина;

Если АргументыКоманднойСтроки.Количество() = 0 Тогда
	ТолькоЮнитТесты = Ложь;
Иначе
	ТолькоЮнитТесты = Булево(АргументыКоманднойСтроки[0]);
КонецЕсли;

// Попытка
// 	ТестыПрошли = ПрогнатьТесты();

// Исключение
// 	ТестыПрошли = Ложь;
// 	Сообщить(СтрШаблон("Тесты через 1testrunner выполнены неудачно
// 	|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
// КонецПопытки;

ФичиПрошли = Истина;

Попытка
	ФичиПрошли = ПрогнатьФичи(ТолькоЮнитТесты);
Исключение
	ФичиПрошли = Ложь;
	Сообщить(СтрШаблон("Тесты поведения через 1bdd выполнены неудачно
	|%1", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
КонецПопытки;

Если Не ТестыПрошли Или Не ФичиПрошли Тогда
	ВызватьИсключение "Тестирование завершилось неудачно!";
Иначе
	Сообщить(СтрШаблон("Результат прогона тестов <%1>
	|", ТестыПрошли));
КонецЕсли;
