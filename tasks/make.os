#Использовать gitrunner
#Использовать tempfiles

Перем Лог;
Перем КаталогПроекта;

Процедура СобратьПакет(Знач ВыходнойКаталог, Знач ПутьКМанифестуСборки)

	КомандаOpm = Новый Команда;
	// КомандаOpm.УстановитьРабочийКаталог(Каталог);
	КомандаOpm.УстановитьКоманду("opm");
	КомандаOpm.ДобавитьПараметр("build");
	КомандаOpm.ДобавитьПараметр("-m");
	КомандаOpm.ДобавитьПараметр(ПутьКМанифестуСборки);
	КомандаOpm.ДобавитьПараметр("-o");
	КомандаOpm.ДобавитьПараметр(ВыходнойКаталог);
	КомандаOpm.ДобавитьПараметр(КаталогПроекта);
	КомандаOpm.ПоказыватьВыводНемедленно(Истина);

	КодВозврата = КомандаOpm.Исполнить();

	Если КодВозврата <> 0  Тогда
		ВызватьИсключение КомандаOpm.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьПакет(Знач КаталогУстановки, КаталогПакета)

	Лог.Информация("Каталог поиска пакета <%1>", КаталогПакета);

	МассивФайлов = НайтиФайлы(КаталогПакета, "*.ospx");

	Если МассивФайлов.Количество() = 0 Тогда
		ВызватьИсключение Новый ИнформацияОбОшибке("Ошибка установки пакета", "Не найден собранный файл пакета");
	КонецЕсли;

	ФайлПлагина = МассивФайлов[0].ПолноеИмя;

	Лог.Информация("Установка пакета библиотеки");
	КомандаOpm = Новый Команда;
	КомандаOpm.УстановитьРабочийКаталог(КаталогПакета);
	КомандаOpm.УстановитьКоманду("opm");
	КомандаOpm.ДобавитьПараметр("install");
	КомандаOpm.ДобавитьПараметр("-f");
	КомандаOpm.ДобавитьПараметр(ФайлПлагина);
	КомандаOpm.ДобавитьПараметр("--dest");
	КомандаOpm.ДобавитьПараметр(КаталогУстановки);
	КомандаOpm.ПоказыватьВыводНемедленно(Истина);

	КодВозврата = КомандаOpm.Исполнить();

	Если КодВозврата <> 0  Тогда
		ВызватьИсключение КомандаOpm.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Процедура ВыполнитьСборкуEXE(КаталогУстановки)

	Лог.Информация("Выполнение создания exe  в <%1>", КаталогУстановки);

	ФайлПриложения = ОбъединитьПути(КаталогУстановки, "git2reposync", "src/cmd", "git2reposync.os");
	ВыходнойФайл = ОбъединитьПути(КаталогПроекта, "bin", "git2reposync.exe");

	КомандаOpm = Новый Команда;
	КомандаOpm.УстановитьРабочийКаталог(КаталогУстановки);
	КомандаOpm.УстановитьКоманду("oscript");
	КомандаOpm.ДобавитьПараметр("-make");
	КомандаOpm.ДобавитьПараметр(ФайлПриложения);
	КомандаOpm.ДобавитьПараметр(ВыходнойФайл);
	КомандаOpm.ПоказыватьВыводНемедленно(Истина);

	КодВозврата = КомандаOpm.Исполнить();

	Если КодВозврата <> 0  Тогда
		ВызватьИсключение КомандаOpm.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Процедура ПодготовитьПлагины(Знач КаталогУстановки)

	ИнициализироватьВстроенныеПлагины(КаталогУстановки);

	ПутьКФайлуПараметрыПриложения = ОбъединитьПути(КаталогУстановки, "git2reposync", "src/cmd/Модули", "ПараметрыПриложения.os");

	ПодключитьСценарий(ПутьКФайлуПараметрыПриложения, "ПараметрыПриложения");

	ПараметрыПриложения = Новый ПараметрыПриложения;

	КаталогПлагинов = ПараметрыПриложения.КаталогПлагинов();
	КаталогВнутреннихКлассов = ОбъединитьПути(КаталогУстановки, "git2reposync", "src/core/Классы/internal/Классы");

	СкопироватьСтандартныйЗагрузчик(КаталогПлагинов);

	ПодготовитьФайлИндексПлагиновEXE(КаталогВнутреннихКлассов, КаталогПлагинов);

КонецПроцедуры

Процедура ПодготовитьФайлИндексПлагиновEXE(Знач КаталогВнутреннихКлассов, Знач КаталогПлагинов)

	МассивПлагинов = ПолучитьМассивПлагинов(КаталогПлагинов);

	ФайлИндексПлагиновEXE = ОбъединитьПути(КаталогВнутреннихКлассов, "ПодключениеЗапакованныхПлагинов.os");

	ЗаписьТекста = Новый ЗаписьТекста(ФайлИндексПлагиновEXE);

	КаталогиПлагинов = НайтиФайлы(КаталогПлагинов, ПолучитьМаскуВсеФайлы(), Ложь);

	Для каждого Каталоги Из КаталогиПлагинов Цикл

		Если Не Каталоги.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		ЗаписьТекста.ЗаписатьСтроку(СтрШаблон("#Использовать ""%1""", Каталоги.ПолноеИмя));

	КонецЦикла;

	ЗаписьТекста.ЗаписатьСтроку("Функция ИндексПлагинов() Экспорт");
	ЗаписьТекста.ЗаписатьСтроку("	ИндексПлагинов = Новый Массив;");

	Для каждого ИмяПлагина Из МассивПлагинов Цикл
		ЗаписьТекста.ЗаписатьСтроку(СтрШаблон("	 ИндексПлагинов.Добавить(""%1"");", ИмяПлагина));
	КонецЦикла;

	ЗаписьТекста.ЗаписатьСтроку("	Возврат ИндексПлагинов;");
	ЗаписьТекста.ЗаписатьСтроку("КонецФункции");

	ЗаписьТекста.Закрыть();

КонецПроцедуры

Функция ПолучитьМассивПлагинов(Знач КаталогПлагинов)

	Лог.Отладка("Обновление индекса плагина из каталога <%1>", КаталогПлагинов);
	МассивПлагинов = Новый Массив;

	КаталогиПлагинов = НайтиФайлы(КаталогПлагинов, ПолучитьМаскуВсеФайлы(), Ложь);

	Для каждого Каталоги Из КаталогиПлагинов Цикл

		Если Не Каталоги.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		ПрочитатьПлагин(Каталоги.ПолноеИмя, МассивПлагинов);

	КонецЦикла;

	Лог.Отладка("В индекс плагинов добавлено <%1> плагинов", МассивПлагинов.Количество());

	Возврат МассивПлагинов;

КонецФункции

Процедура ПрочитатьПлагин(Знач Путь, МассивПлагинов)

	Лог.Отладка("Загружаю плагины из каталога <%1>", Путь);

	ФайлМанифеста = Новый Файл(ОбъединитьПути(Путь, "lib.config"));

	Если ФайлМанифеста.Существует() Тогда
		Лог.Отладка("Обрабатываем по манифесту");
		ДобавитьКлассыПлагинов(ФайлМанифеста.ПолноеИмя, Путь, МассивПлагинов);
	Иначе
		Лог.Отладка("Плагины из каталога <%1> не могут быть загружены - не найден файл <lib.config>", Путь);
	КонецЕсли;

КонецПроцедуры

Процедура ДобавитьКлассыПлагинов(Знач Файл, Знач Путь, МассивПлагинов)

	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(Файл);
	Чтение.ПерейтиКСодержимому();

	Если Чтение.ЛокальноеИмя <> "package-def" Тогда
		Чтение.Закрыть();
		Возврат;
	КонецЕсли;

	Пока Чтение.Прочитать() Цикл

		Если Чтение.ТипУзла = ТипУзлаXML.Комментарий Тогда

			Продолжить;

		КонецЕсли;

		Если Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда

			Если Чтение.ЛокальноеИмя = "class" Тогда
				ФайлКласса = Новый Файл(ОбъединитьПути(Путь, Чтение.ЗначениеАтрибута("file")));
				Если ФайлКласса.Существует()
					И ФайлКласса.ЭтоФайл() Тогда
					Идентификатор = Чтение.ЗначениеАтрибута("name");
					Если Не ПустаяСтрока(Идентификатор) Тогда
						МассивПлагинов.Добавить(Идентификатор);
					КонецЕсли;
				Иначе
					ВызватьИсключение "Не найден файл " + ФайлКласса.ПолноеИмя + ", указанный в манифесте";
				КонецЕсли;

				Чтение.Прочитать(); // в конец элемента

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	Чтение.Закрыть();

КонецПроцедуры

Процедура СкопироватьСтандартныйЗагрузчик(ЗНач КаталогПлагинов)

	СтандартныйЗагрузчикБиблиотеки = ОбъединитьПути(КаталогПроекта, "templates", "package-loader.os");
	ПриемникЗагрузчика = ОбъединитьПути(КаталогПлагинов, "package-loader.os");
	КопироватьФайл(СтандартныйЗагрузчикБиблиотеки, ПриемникЗагрузчика);

КонецПроцедуры

Процедура ИнициализироватьВстроенныеПлагины(Знач КаталогУстановки)

	ФайлПриложения = ОбъединитьПути(КаталогУстановки, "git2reposync", "src/cmd", "git2reposync.os");

	КомандаOpm = Новый Команда;
	КаталогПлагинов = ВременныеФайлы.СоздатьКаталог();

	УстановитьПеременнуюСреды("git2reposync_PLUGINS_PATH", КаталогПлагинов);
	Лог.Информация("Каталог плагинов сборки <%1>", КаталогПлагинов);

	КомандаOpm.УстановитьРабочийКаталог(КаталогУстановки);
	КомандаOpm.УстановитьКоманду("oscript");
	КомандаOpm.ДобавитьПараметр(ФайлПриложения);
	КомандаOpm.ДобавитьПараметр("p init");
	КомандаOpm.ПоказыватьВыводНемедленно(Истина);
	// КомандаOpm.("task.install-opm");

	КодВозврата = КомандаOpm.Исполнить();

	Если КодВозврата <> 0 Тогда
		ВызватьИсключение КомандаOpm.ПолучитьВывод();
	КонецЕсли;

КонецПроцедуры

Процедура ПолезнаяРабота()

	КаталогСборки = ВременныеФайлы.СоздатьКаталог();
	КаталогУстановки = ВременныеФайлы.СоздатьКаталог();

	ПутьКМанифестуСборки = ОбъединитьПути(КаталогПроекта, "build_packagedef");

	СобратьПакет(КаталогСборки, ПутьКМанифестуСборки);

	Лог.Информация("Устанавливаю в каталог <%1>", КаталогУстановки);

	УстановитьПакет(КаталогУстановки, КаталогСборки);

	ПодготовитьПлагины(КаталогУстановки);

	ВыполнитьСборкуEXE(КаталогУстановки);

	ВременныеФайлы.УдалитьФайл(КаталогСборки);
	//ВременныеФайлы.УдалитьФайл(КаталогУстановки);

КонецПроцедуры

КаталогПроекта = ОбъединитьПути(ТекущийСценарий().Каталог, "..");
Лог = Логирование.ПолучитьЛог("task.install-opm");
// Лог.УстановитьУровень(УровниЛОга.отладка);

ПолезнаяРабота();
