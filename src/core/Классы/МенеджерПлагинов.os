#Использовать fs
#Использовать json
#Использовать logos
#Использовать "./internal"

Перем ИндексПлагинов;
Перем КаталогПлагинов;

#Область Экспортные_методы

// Возвращает индекс плагинов
//
//  Возвращаемое значение:
//   Соответствие - набор плагинов 
//                   * ключ - Строка - имя плагина
//                   * значение - Объект - ссылка на произвольный объект 
//
Функция ПолучитьИндексПлагинов() Экспорт
	Возврат ИндексПлагинов;
КонецФункции

// Выполняет загрузку плагинов из каталога
//
Процедура ЗагрузитьПлагины() Экспорт

	ТекущийЗагрузчикПлагинов = Новый ЗагрузчикПлагинов(КаталогПлагинов);
	ТекущийЗагрузчикПлагинов.ЗагрузитьПлагины();
	ИндексПлагинов = ТекущийЗагрузчикПлагинов.ИндексПлагинов();

КонецПроцедуры

// Создает и возвращает новый МенеджерПодписок для текущего индекса плагинов
//
//  Возвращаемое значение:
//   Объект.МенеджерПодписок - ссылка на новый объект класса <МенеджерПодписок>
//
Функция НовыйМенеджерПодписок() Экспорт
	
	Возврат Новый МенеджерПодписок(ИндексПлагинов);

КонецФункции

// Производит отключение массива плагинов
//
// Параметры:
//   МассивПлагинов - Массив - Элементы типа Строка, имена плагинов
//
Процедура ОтключитьПлагины(МассивПлагинов) Экспорт
	
	Для каждого ОтключаемыйПлагин Из МассивПлагинов Цикл
		
		Плагин = ИндексПлагинов[ОтключаемыйПлагин];

		Если Плагин = Неопределено Тогда
			Продолжить;
		КонецЕсли;

		Плагин.Отключить();

	КонецЦикла;

КонецПроцедуры

// Включает набор плагинов
//
// Параметры:
//   МассивПлагинов - Массив, Соответствие - набор наименований плагинов
//
Процедура ВключитьПлагины(МассивПлагинов) Экспорт
	
	Для каждого ВключаемыеПлагин Из МассивПлагинов Цикл
		
		Если ТипЗнч(ВключаемыеПлагин) = Тип("Строка") Тогда
			ВключитьПлагин(ВключаемыеПлагин);
		Иначе
			ВключитьПлагин(ВключаемыеПлагин.Ключ);
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

// Включает плагин к использованию
//
// Параметры:
//   ИмяПлагина - Строка - имя плагина для включения
//
Процедура ВключитьПлагин(Знач ИмяПлагина) Экспорт

	Плагин = ИндексПлагинов[ИмяПлагина];

	Если Плагин = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Плагин.Включить();

КонецПроцедуры

Процедура ВключитьВсеПлагины() Экспорт
	
	Для каждого КлючЗначение Из ИндексПлагинов Цикл
		
		Плагин = КлючЗначение.Значение;
		Плагин.Включить();

	КонецЦикла;

КонецПроцедуры

Процедура ОтключитьВсеПлагины() Экспорт

	Для каждого КлючЗначение Из ИндексПлагинов Цикл
		
		Плагин = КлючЗначение.Значение;
		Плагин.Отключить();

	КонецЦикла;
	
КонецПроцедуры

// Устанавливает каталог установки и чтения плагинов
//
// Параметры:
//   ПутьККаталогу - Строка - полный путь к каталогу хранения плагинов
//
Процедура УстановитьКаталогПлагинов(Знач ПутьККаталогу) Экспорт
	КаталогПлагинов = ПутьККаталогу;
КонецПроцедуры

// Производит установку пакета плагинов из файла
//
// Параметры:
//   ПутьКФайлуПакета - Строка - полный путь к файлу пакета плагина
//
Процедура УстановитьФайлПлагин(Знач ПутьКФайлуПакета) Экспорт
	
	Установщик = Новый УстановщикПлагинов();
	Установщик.УстановитьКаталогПлагинов(КаталогПлагинов);
	Установщик.УстановитьФайлПлагина(ПутьКФайлуПакета);

КонецПроцедуры

// Производит установку пакета плагинов по имени
//
// Параметры:
//   ИмяПлагина - Строка - имя пакета плагинов на хабе
//
Процедура УстановитьПлагинПоИмени(Знач ИмяПлагина) Экспорт
	
	Установщик = Новый УстановщикПлагинов();
	Установщик.УстановитьКаталогПлагинов(КаталогПлагинов);
	Установщик.УстановитьПлагинПоИмени(ИмяПлагина);

КонецПроцедуры

// Устанавливает режим отладки для индекса плагинов
//
Процедура УстановитьРежимОтладки() Экспорт
	
	Для каждого КлючЗначение Из ИндексПлагинов Цикл
		
		Плагин = КлючЗначение.Значение;
		Плагин.ВключитьОтладку();

	КонецЦикла;

КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции


Процедура ПриСозданииОбъекта(Знач ЗначениеКаталогПлагинов = Неопределено)
	
	ИндексПлагинов = Новый Соответствие;

	Если ЗначениеЗаполнено(ЗначениеКаталогПлагинов) Тогда
		КаталогПлагинов = ЗначениеКаталогПлагинов;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
