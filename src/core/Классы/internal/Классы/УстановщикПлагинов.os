#Использовать opm
#Использовать logos

Перем Лог; // Объект - логирование операций
Перем ВнутреннийМенеджерУстановкиПакетов; // Объект.МенеджерУстановкиПакетов - для установки пакетов
Перем КаталогПлагинов; // СТрока - каталог установки пакетов
Перем КаталогЗависимостей; // Строка - каталог установки зависимостей пакетов

#Область Экспортные_методы

// Устанавливает каталог, в который будут установлены пакеты плагинов
//
// Параметры:
//   НовыйКаталогПлагинов - Строка - полный путь к каталогу установки пакетов плагинов
//
Процедура УстановитьКаталогПлагинов(Знач НовыйКаталогПлагинов) Экспорт

	КаталогПлагинов = НовыйКаталогПлагинов;
	ВнутреннийМенеджерУстановкиПакетов = Неопределено;

КонецПроцедуры

// Устанавливает каталог, в который будут установлены зависимости пакетов плагинов
//
// Параметры:
//   НовыйКаталогЗависимостей - Строка - полный путь к каталогу установки зависимостей пакетов плагинов
//
Процедура УстановитьКаталогЗависимостей(Знач НовыйКаталогЗависимостей) Экспорт

	КаталогЗависимостей = НовыйКаталогЗависимостей;
	ВнутреннийМенеджерУстановкиПакетов = Неопределено;

КонецПроцедуры

// Производит установке пакета плагина по файлу
//
// Параметры:
//   ПутьКФайлуПлагина - Строка - путь к файлу пакета плагинов
//
Процедура УстановитьФайлПлагина(Знач ПутьКФайлуПлагина) Экспорт

	ФайлПлагина = Новый Файл(ПутьКФайлуПлагина);

	Если Не ФайлПлагина.Существует() Тогда
		Лог.КритичнаяОшибка("Плагин не установлен. Файл <%1> плагина не найден", ПутьКФайлуПлагина);
		ВызватьИсключение "";
	КонецЕсли;

	УстановщикПлагинов = ПолучитьМенеджерУстановкиПакетов();
	УстановщикПлагинов.УстановитьПакетИзАрхива(ПутьКФайлуПлагина);

КонецПроцедуры

// Производит установку пакета плагина по имени с хаба
//
// Параметры:
//   ИмяПлагина - Строка - имя пакета плагинов на хабе
//
Процедура УстановитьПлагинПоИмени(Знач ИмяПлагина) Экспорт

	УстановщикПлагинов = ПолучитьМенеджерУстановкиПакетов();
	УстановщикПлагинов.УстановитьПакет(ИмяПлагина);

КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Функция ПолучитьМенеджерУстановкиПакетов()

	Если ВнутреннийМенеджерУстановкиПакетов = Неопределено Тогда
		ВнутреннийМенеджерУстановкиПакетов = Новый МенеджерУстановкиПакетов("Локально",
							 КаталогПлагинов,
							 КаталогЗависимостей);

	КонецЕсли;

	Возврат ВнутреннийМенеджерУстановкиПакетов;

КонецФункции

Процедура ПриСозданииОбъекта()
	
	ДополнительныйКаталогБиблиотек = ПолучитьЗначениеСистемнойНастройки("lib.additional");

	Если ЗначениеЗаполнено(ДополнительныйКаталогБиблиотек) Тогда
		КаталогЗависимостей = ДополнительныйКаталогБиблиотек;
	Иначе
		КаталогЗависимостей = ПолучитьЗначениеСистемнойНастройки("lib.system");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

Лог = Логирование.ПолучитьЛог("oscript.lib.git2reposync.plugins.installer");
