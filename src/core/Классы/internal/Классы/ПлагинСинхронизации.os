#Использовать reflector
#Использовать delegate

Перем ИмяПлагина; // Строка - Имя плагина
Перем ВерсияПлагина; // Строка - текущая версия плагина
Перем ОписаниеПлагина; // Строка - дополнительное описание плагина
Перем ОписаниеСправки; // Строка - описание справки плагина
Перем ПриоритетПлагина; // Число - приоритет выполнения плагина
Перем РеализованныеМетоды; // Структура - набор реализованних методов
Перем ПлагинВключен; // Булево, признак того что плагин включен
Перем ИндексДелегатов; // Соответствие - кеш вызванных делегатов
Перем КлассПлагина; // Объект - ссылка на плагин
Перем ИмяКлассаПлагина; // Строка имя класса плагина
Перем Лог; // Объект ллогирования

#Область Экспортные_методы

// Возвращает имя плагина
//
//  Возвращаемое значение:
//   Строка - текущее имя плагина
//
Функция Имя() Экспорт
	Возврат ИмяПлагина;
КонецФункции

// Возвращает версию плагина
//
//  Возвращаемое значение:
//   Строка - текущая версия плагина
//
Функция Версия() Экспорт
	Возврат ВерсияПлагина;
КонецФункции

// Возвращает описание плагина
//
//  Возвращаемое значение:
//   Строка - описание плагина
//
Функция Описание() Экспорт
	Возврат ОписаниеПлагина;
КонецФункции

// Возвращает форматированную справку плагина
//
//  Возвращаемое значение:
//   Строка - форматированная справка плагина
//
Функция Справка() Экспорт
	Возврат ОписаниеСправки;
КонецФункции

// Возвращает приоритет выполнения плагина
//
//  Возвращаемое значение:
//   Число - текущий приоритет плагина
//
Функция Приоритет() Экспорт
	Возврат ПриоритетПлагина;
КонецФункции

// Выключает выполнение плагина
//
Процедура Отключить() Экспорт
	ПлагинВключен = Ложь;
КонецПроцедуры

// Включает выполнение плагина
//
Процедура Включить() Экспорт
	ПлагинВключен = Истина;
КонецПроцедуры

// Возращает признак выполнения плагина
//
//  Возвращаемое значение:
//   Булево - признак выполнения плагина
//
Функция Включен() Экспорт
	Возврат ПлагинВключен;
КонецФункции

// Включает отладочный режим для плагина
//
Процедура ВключитьОтладку() Экспорт

	Лог.УстановитьУровень(УровниЛога.Отладка);
	
КонецПроцедуры

// Выполняет метод подписки на плагине
//
// Параметры:
//   ИмяМетода - Строка - имя метода на плагине
//   НаборПараметров - Массив  - Набор параметров для передачи на метод
//
Процедура ВыполнитьПодписку(Знач ИмяМетода, НаборПараметров) Экспорт
	
	Если Не ПлагинВключен Тогда
		Возврат;
	КонецЕсли;

	Если Не МетодРеализован(ИмяМетода) Тогда
		Возврат;
	КонецЕсли;

	ВыполнитьДелегата(ИмяМетода, НаборПараметров);

КонецПроцедуры

#КонецОбласти

#Область Вспомогательные_процедуры_и_функции

Функция МетодРеализован(Знач ИмяМетода)
	
	СтатусМетода = РеализованныеМетоды[ИмяМетода];
	
	Возврат СтатусМетода;

КонецФункции

Процедура ВыполнитьДелегата(Знач ИмяМетода, НаборПараметров)

	Если КлассПлагина = Неопределено Тогда
		СоздатьКлассПлагина();
	КонецЕсли;

	ДелегатМетода = ПолучитьДелегата(ИмяМетода);

	ДелегатМетода.Исполнить(НаборПараметров);

КонецПроцедуры

Функция ПолучитьДелегата(Знач ИмяМетода)
	
	ДелегатМетода = ИндексДелегатов[ИмяМетода];

	Если ДелегатМетода = Неопределено Тогда
		ДелегатМетода = Делегаты.Создать(КлассПлагина, ИмяМетода);
		ИндексДелегатов.Вставить(ИмяМетода, ДелегатМетода);
	КонецЕсли;

	Возврат ДелегатМетода;

КонецФункции

Функция ПолучитьКлассПлагина()
	Возврат Новый (ИмяКлассаПлагина);
КонецФункции

Процедура СоздатьКлассПлагина()
	КлассПлагина = ПолучитьКлассПлагина();
КонецПроцедуры

Процедура ПриСозданииОбъекта(Знач ВходящееИмяКлассаПлагина, ИнтерфейсМетодовПлагинов)
	
	ИмяКлассаПлагина = ВходящееИмяКлассаПлагина;

	КлассПлагина = ПолучитьКлассПлагина();

	ИнтерфейсПлагина = Новый ИнтерфейсОбъекта();
	ИнтерфейсПлагина.Ф("Версия");
	ИнтерфейсПлагина.Ф("Имя");
	ИнтерфейсПлагина.Ф("Описание");
	ИнтерфейсПлагина.Ф("Справка");
	ИнтерфейсПлагина.Ф("ИмяЛога");
	ИнтерфейсПлагина.Ф("Приоритет");

	Рефлектор = Новый РефлекторОбъекта(КлассПлагина);
	ЭтоПлагин = Рефлектор.РеализуетИнтерфейс(ИнтерфейсПлагина);

	Если Не ЭтоПлагин Тогда
		ВызватьИсключение СтрШаблон("Переданный класс <%1> не реализует интерфейс плагина", ИмяКлассаПлагина);
	КонецЕсли;

	ИмяПлагина = КлассПлагина.Имя();
	ВерсияПлагина = КлассПлагина.Версия();
	ОписаниеПлагина = КлассПлагина.Описание();
	ПриоритетПлагина = КлассПлагина.Приоритет();

	Лог = Логирование.ПолучитьЛог(КлассПлагина.ИмяЛога());
	ПлагинВключен = Ложь;
	ИндексДелегатов = Новый Соответствие;
	
	РеализованныеМетоды = Рефлектор.РеализованныеМетодыИнтерфейса(ИнтерфейсМетодовПлагинов);

КонецПроцедуры

#КонецОбласти
