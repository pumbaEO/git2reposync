

Процедура ОписаниеКоманды(Команда) Экспорт
	
	Команда.Опция("u storage-user", "", "пользователь хранилища конфигурации")
				.ТСтрока()
				.ВОкружении("git2reposync_STORAGE_USER")
				.ПоУмолчанию("Администратор");
	
	Команда.Опция("p storage-pwd", "", "пароль пользователя хранилища конфигурации")
				.ТСтрока()
				.ВОкружении("git2reposync_STORAGE_PASSWORD git2reposync_STORAGE_PWD");

	Команда.Опция("e ext extension", "", "имя расширения для работы с хранилищем расширения")
				.ТСтрока()
				.ВОкружении("git2reposync_EXTENSION");

	Команда.Аргумент("PATH", "", "Путь к хранилищу конфигурации 1С.")
				.ТСтрока()
				.ВОкружении("git2reposync_STORAGE_PATH");

	Команда.Аргумент("WORKDIR", "", "Адрес локального репозитория GIT.
	|		Каталог исходников внутри локальной копии git-репозитория. По умолчанию текущий каталог")
				.ВОкружении("git2reposync_WORKDIR")
				.Обязательный(Ложь)
				.ПоУмолчанию(ТекущийКаталог());

	ПараметрыПриложения.ВыполнитьПодпискуПриРегистрацииКомандыПриложения(Команда);

КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Лог = ПараметрыПриложения.Лог();

	ПутьКХранилищу			= Команда.ЗначениеАргумента("PATH");
	КаталогРабочейКопии		= Команда.ЗначениеАргумента("WORKDIR");
	ПользовательХранилища		= Команда.ЗначениеОпции("storage-user");
	ПарольПользователяХранилища	= Команда.ЗначениеОпции("storage-pwd");
	ИмяРасширения				= Команда.ЗначениеОпции("extension");

	ПользовательИБ			= Команда.ЗначениеОпции("ib-user");
	ПарольПользователяИБ	= Команда.ЗначениеОпции("ib-pwd");
	СтрокаСоединенияИБ		= Команда.ЗначениеОпции("ib-connection");

	// инициализировать с нуля
	ФайлКаталогРабочейКопии = Новый Файл(КаталогРабочейКопии);
	Если Не ФайлКаталогРабочейКопии.Существует() Тогда
		СоздатьКаталог(КаталогРабочейКопии);
	КонецЕсли;

	ЭтоКаталогГит = ПроверитьНаличиеРепозитарияГит(КаталогРабочейКопии);
	Если Не ЭтоКаталогГит Тогда
		
		ИнициализироватьРепозитарий(КаталогРабочейКопии);
		
	КонецЕсли;

	МассивФайлов = НайтиФайлы(КаталогРабочейКопии, "src");
	КаталогИсходников = КаталогРабочейКопии;
	Если МассивФайлов.Количество() > 0  Тогда
		КаталогИсходников = МассивФайлов[0].ПолноеИмя;
	КонецЕсли;

	ОбщиеПараметры = ПараметрыПриложения.Параметры();
	МенеджерПлагинов = ПараметрыПриложения.МенеджерПлагинов();
	
	ИндексПлагинов = МенеджерПлагинов.ПолучитьИндексПлагинов();

	Распаковщик = Новый МенеджерСинхронизации();
	Распаковщик.ВерсияПлатформы(ОбщиеПараметры.ВерсияПлатформы)
				.ПутьКПлатформе(ОбщиеПараметры.ПутьКПлатформе)
				.ДоменПочтыПоУмолчанию(ОбщиеПараметры.ДоменПочты)
				.ИсполняемыйФайлГит(ОбщиеПараметры.ПутьКГит)
				.УстановитьКонтекст(СтрокаСоединенияИБ, ПользовательИБ, ПарольПользователяИБ)
				.ПодпискиНаСобытия(ИндексПлагинов)
				.ПараметрыПодписокНаСобытия(Команда.ПараметрыКоманды())
				.ИмяРасширения(ИмяРасширения)
				.УровеньЛога(ПараметрыПриложения.УровеньЛога())
				.АвторизацияВХранилищеКонфигурации(ПользовательХранилища, ПарольПользователяХранилища);
	
	Распаковщик.НаполнитьКаталогРабочейКопииСлужебнымиДанными(КаталогИсходников, ПутьКХранилищу);
	
	Лог.Информация("Инициализация завершена");
	
КонецПроцедуры // ВыполнитьКоманду

// Выполняет инициализацию репо
//
Процедура ИнициализироватьРепозитарий(Знач КаталогЛокальнойКопии) 

	ГитРепозиторий = Новый ГитРепозиторий;
	ГитРепозиторий.УстановитьРабочийКаталог(КаталогЛокальнойКопии);
	ГитРепозиторий.Инициализировать();
	
КонецПроцедуры

// Возвращает Истина, если каталог является каталогом или подкаталогом гит-репозитория, иначе возвращается Ложь.
//
Функция ПроверитьНаличиеРепозитарияГит(Знач КаталогЛокальнойКопии) 
	
	ГитРепозиторий = Новый ГитРепозиторий;
	ГитРепозиторий.УстановитьРабочийКаталог(КаталогЛокальнойКопии);
	ГитРепозиторий.УстановитьТихийРежимРаботы();
	
	ПараметрыЗапуска = Новый Массив;
	ПараметрыЗапуска.Добавить("rev-parse");
	ПараметрыЗапуска.Добавить("--git-dir");

	ГитРепозиторий.ВыполнитьКоманду(ПараметрыЗапуска);

	КодВозврата = ГитРепозиторий.ПолучитьКодВозврата();

	Возврат КодВозврата = 0;

КонецФункции
