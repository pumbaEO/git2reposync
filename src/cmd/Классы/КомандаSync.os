Перем Лог;

Процедура ОписаниеКоманды(Команда) Экспорт
	

	Команда.Опция("m merge-file", "", "путь к файлумерджа")
	.ТСтрока()
	.ВОкружении("git2reposync_MERGE-FILE")
	.ПоУмолчанию("./merge.xml");

	Команда.Опция("c commits", "", "коммиты для синхронизации разделитель ")
	.ТСтрока()
	.ВОкружении("git2reposync_COMMITS")
	.ПоУмолчанию("HEAD");

	Команда.Опция("u storage-user", "", "пользователь хранилища конфигурации")
	.ТСтрока()
	.ВОкружении("git2reposync_STORAGE_USER")
	.ПоУмолчанию("Администратор");
	
	Команда.Опция("p storage-pwd", "", "пароль пользователя хранилища конфигурации")
	.ТСтрока()
	.ВОкружении("git2reposync_STORAGE_PASSWORD git2reposync_STORAGE_PWD");
	
	Команда.Опция("e ext extension", "", "имя расширения для работы с хранилищем расширения")
	.ТСтрока()
	.ВОкружении("git2reposync_EXTENSION");
	
	Команда.Аргумент("PATH", "", "Путь к хранилищу конфигурации 1С.")
	.ТСтрока()
	.ВОкружении("git2reposync_STORAGE_PATH");
	Команда.Аргумент("WORKDIR", "", "Каталог исходников внутри локальной копии git-репозитория.")
	.ТСтрока()
	.ВОкружении("git2reposync_WORKDIR")
	.Обязательный(Ложь)
	.ПоУмолчанию(ТекущийКаталог());
	
	ПараметрыПриложения.ВыполнитьПодпискуПриРегистрацииКомандыПриложения(Команда);
	
КонецПроцедуры

Процедура ВыполнитьКоманду(Знач Команда) Экспорт
	
	Лог.Информация("Начало выполнение команды <sync>");
	
	ПутьКХранилищу = Команда.ЗначениеАргумента("PATH");
	
	КаталогРабочейКопии = Команда.ЗначениеАргумента("WORKDIR");
	
	ПользовательХранилища = Команда.ЗначениеОпции("storage-user");
	ПутьКФайлуСравнения = Команда.ЗначениеОпции("merge-file"); 
	КоммитыДляСинхронизации = Команда.ЗначениеОпции("commits");
	ПарольПользователяХранилища = Команда.ЗначениеОпции("storage-pwd");
	ИмяРасширения = Команда.ЗначениеОпции("extension");
	
	ПользовательИБ = Команда.ЗначениеОпции("ib-user");
	ПарольПользователяИБ = Команда.ЗначениеОпции("ib-pwd");
	СтрокаСоединенияИБ = Команда.ЗначениеОпции("ib-connection");
	
	ФайлКаталогРабочейКопии = Новый Файл(КаталогРабочейКопии);
	КаталогРабочейКопии = ФайлКаталогРабочейКопии.ПолноеИмя;
	
	Лог.Отладка("ПутьКХранилищу = " + ПутьКХранилищу);
	Лог.Отладка("КаталогРабочейКопии = " + КаталогРабочейКопии);
	
	МассивФайлов = НайтиФайлы(КаталогРабочейКопии, "src");
	КаталогИсходников = КаталогРабочейКопии;
	Если МассивФайлов.Количество() > 0 
		и НЕ  НайтиФайлы(КаталогРабочейКопии, "DT-INF").Количество() > 0 Тогда
		КаталогИсходников = МассивФайлов[0].ПолноеИмя;
	КонецЕсли;
	
	ОбщиеПараметры = ПараметрыПриложения.Параметры();
	МенеджерПлагинов = ПараметрыПриложения.МенеджерПлагинов();
	
	ИндексПлагинов = МенеджерПлагинов.ПолучитьИндексПлагинов();
	
	Распаковщик = Новый МенеджерСинхронизации();
	//Распаковщик.ВерсияПлатформы
	Распаковщик.ВерсияПлатформы(ОбщиеПараметры.ВерсияПлатформы)
	.ПутьКПлатформе(ОбщиеПараметры.ПутьКПлатформе)
	.ДоменПочтыПоУмолчанию(ОбщиеПараметры.ДоменПочты)
	.ИсполняемыйФайлГит(ОбщиеПараметры.ПутьКГит)
	.УстановитьКонтекст(СтрокаСоединенияИБ, ПользовательИБ, ПарольПользователяИБ)
	.ПодпискиНаСобытия(ИндексПлагинов)
	.ПараметрыПодписокНаСобытия(Команда.ПараметрыКоманды())
	.УровеньЛога(ПараметрыПриложения.УровеньЛога())
	.ИмяРасширения(ИмяРасширения)
	.УстановитьПутьКФайлуСравнения(ПутьКФайлуСравнения)
	.АвторизацияВХранилищеКонфигурации(ПользовательХранилища, ПарольПользователяХранилища)
	.РежимУдаленияВременныхФайлов(Истина).Синхронизировать(КаталогИсходников, ПутьКХранилищу, КоммитыДляСинхронизации);
	
	Лог.Информация("Завершено выполнение команды <sync>");
	
КонецПроцедуры

Лог = ПараметрыПриложения.Лог();
